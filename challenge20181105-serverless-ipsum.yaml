---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'The #noServerNovember Serverless Ipsum challenge'

Parameters:
  CfnCodeS3Bucket:
    Description: S3 bucket containing code zip
    Type: String
  CfnCodeS3Key:
    Description: S3 key containing code zip
    Type: String

Outputs:
  ProdEndpoint:
    Value: !Sub "https://${ApiGw}.execute-api.${AWS::Region}.amazonaws.com/${ApiGwStage}/serverless"

Resources:
  ApiGwCloudWatchRole: 
    Type: AWS::IAM::Role
    Properties: 
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: "/"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal: 
            Service: ["apigateway.amazonaws.com"]

  ApiGwAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt ['ApiGwCloudWatchRole', 'Arn']
    
  ApiGw:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'Serverless Ipsum #noServerNovember challenge'
      FailOnWarnings: true

  ApiGwDeployment:
    Type: AWS::ApiGateway::Deployment
    # Required -- see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html
    DependsOn: ApiGwMethod
    Properties:
      RestApiId: !Ref ApiGw

  ApiGwStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGwDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: '/*'
          ThrottlingRateLimit: 2
          ThrottlingBurstLimit: 20
      RestApiId: !Ref ApiGw
      StageName: prod

  ApiGwResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGw
      ParentId: !GetAtt ["ApiGw", "RootResourceId"]
      PathPart: "{proxy+}"

  ApiGwMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGw
      ResourceId: !Ref ApiGwResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServerlessIpsumFunction.Arn}/invocations"

  FunctionExecRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]

  ServerlessIpsumFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Responder for the #noServerNovember challenge'
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt FunctionExecRole.Arn
      Timeout: 11
      Code:
        ZipFile: !Sub |
          import logging
        
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
        
          def handler(event, context):
            body = """
            <!DOCTYPE html>
            <html lang="la">
              <head><title>Serverless Ipsum</title></head>
              <body style="font-family: 'Plex', sans-serif;">
                <h1><a href="https://github.com/trenton/serverless">Serverless Ipsum</a></h1>
                <p style="text-align: right">#noServerNovember</p>
              </body>
            </html>
            """

            response = {
              "statusCode": 200,
              "headers": {
                "Content-Type": "text/html; charset=utf-8",
              },
              "body": body,
            }

            return response
      
  ServerlessIpsumFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ServerlessIpsumFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ""
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref ApiGw
          - '/*'
...
